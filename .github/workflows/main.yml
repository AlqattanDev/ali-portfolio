name: Main Workflow

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    - cron: '0 3 * * 6' # Weekly on Saturdays at 3 AM UTC for design system checks
    - cron: '0 2 * * 0' # Weekly on Sundays at 2 AM UTC for visual quality checks

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  ci:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run build (with TypeScript transpilation)
        run: npm run build
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Start dev server
        run: npm run dev &
        env:
          CI: true
      - name: Wait for server
        run: npx wait-on http://localhost:4321 --timeout 120000
      - name: Run Playwright tests
        run: npm run test
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results
          path: test-results/
      - name: Run security audit
        run: npm audit --audit-level moderate
      - name: Check build output
        run: |
          if [ ! -f "dist/index.html" ]; then
            echo "Build failed: index.html not found"
            exit 1
          fi
          echo "‚úÖ Build successful - all required files generated"

  design-system:
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'pull_request' || github.event_name == 'push' || (github.event_name == 'schedule' && github.event.schedule == '0 3 * * 6')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build site
        run: npm run build
      - name: Analyze Typography
        run: ./scripts/analyze-typography.sh
      - name: Upload typography report
        uses: actions/upload-artifact@v4
        with:
          name: typography-analysis
          path: TYPOGRAPHY_REPORT.md
      - name: Setup Python for color analysis
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install color analysis tools
        run: pip install colorthief webcolors pillow
      - name: Analyze Color Palette
        run: ./scripts/analyze-color-palette.sh
      - name: Upload color analysis
        uses: actions/upload-artifact@v4
        with:
          name: color-palette-analysis
          path: COLOR_REPORT.md
      - name: Analyze Spacing
        run: ./scripts/analyze-spacing.sh
      - name: Upload spacing analysis
        uses: actions/upload-artifact@v4
        with:
          name: spacing-analysis
          path: SPACING_REPORT.md
      - name: Install Playwright for DOM analysis
        run: npx playwright install --with-deps
      - name: Serve site
        run: |
          npx serve dist -l 3000 &
          npx wait-on http://localhost:3000 --timeout 60000
      - name: Analyze component patterns
        run: node scripts/analyze-components.js
      - name: Upload component analysis
        uses: actions/upload-artifact@v4
        with:
          name: component-analysis
          path: COMPONENT_REPORT.md
      - name: Install CSS analysis tools
        run: npm install -g sass autoprefixer clean-css-cli
      - name: Analyze CSS Architecture
        run: ./scripts/analyze-css-architecture.sh
      - name: Upload CSS architecture analysis
        uses: actions/upload-artifact@v4
        with:
          name: css-architecture-analysis
          path: CSS_ARCHITECTURE_REPORT.md
      - name: Generate Design System Summary
        run: ./scripts/generate-design-system-summary.sh
      - name: Upload design system summary
        uses: actions/upload-artifact@v4
        with:
          name: design-system-summary-report
          path: DESIGN_SYSTEM_SUMMARY.md

  image-optimization:
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install image optimization tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jpegoptim optipng pngquant gifsicle webp imagemagick
          npm install -g imagemin-cli sharp-cli
      - name: Optimize Images
        run: ./scripts/optimize-images.sh
      - name: Upload optimization artifacts
        uses: actions/upload-artifact@v4
        with:
          name: optimized-images
          path: |
            optimized/
            IMAGE_OPTIMIZATION_REPORT.md
      - name: Check if optimization provides significant savings
        id: check-savings
        run: |
          total_original=0
          total_optimized=0
          find public src -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -type f | while read img; do
            if [ -f "optimized/$img" ]; then
              original_size=$(wc -c < "$img")
              optimized_size=$(wc -c < "optimized/$img")
              total_original=$((total_original + original_size))
              total_optimized=$((total_optimized + optimized_size))
            fi
          done
          if [ $total_original -gt 0 ]; then
            savings_pct=$(( (total_original - total_optimized) * 100 / total_original ))
            echo "savings_percentage=$savings_pct" >> $GITHUB_OUTPUT
            if [ $savings_pct -gt 10 ]; then
              echo "significant_savings=true" >> $GITHUB_OUTPUT
            else
              echo "significant_savings=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "savings_percentage=0" >> $GITHUB_OUTPUT
            echo "significant_savings=false" >> $GITHUB_OUTPUT
          fi
      - name: Create PR with optimized images
        if: github.event_name == 'push' && steps.check-savings.outputs.significant_savings == 'true'
        run: |
          find optimized -type f | while read optimized_file; do
            original_file="${optimized_file#optimized/}"
            if [[ "$optimized_file" != *.webp ]] && [[ "$optimized_file" != *-*w.* ]]; then
              cp "$optimized_file" "$original_file"
            fi
          done
          git config --global user.name 'Image Optimizer Bot'
          git config --global user.email 'optimizer@github-actions.bot'
          branch_name="optimize-images-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$branch_name"
          git add .
          if git diff --staged --quiet; then
            echo "No optimization improvements to commit"
          else
            git commit -m "üì∏ Optimize images for better web performance"
            git push origin "$branch_name"
            gh pr create \
              --title "üì∏ Automated Image Optimization" \
              --body "This PR contains automatically optimized images." \
              --head "$branch_name" \
              --base main
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Comment on PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let comment = `## üñºÔ∏è Image Optimization Analysis\n\nThis PR includes image changes. Here's the optimization analysis:\n\n`;
            try {
              const report = fs.readFileSync('IMAGE_OPTIMIZATION_REPORT.md', 'utf8');
              comment += report;
            } catch (error) {
              comment += "Optimization report not available.";
            }
            comment += `\n\nüí° **Tip**: The optimized images and WebP variants are available as build artifacts.`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  visual-quality:
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'pull_request' || github.event_name == 'push' || (github.event_name == 'schedule' && github.event.schedule == '0 2 * * 0')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build site
        run: npm run build
      - name: Serve built site
        run: npx serve dist -l 3000 &
      - name: Wait for server
        run: npx wait-on http://localhost:3000 --timeout 60000
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Playwright
        run: npx playwright install --with-deps
      - name: Start dev server for visual tests
        run: npm run dev &
      - name: Wait for dev server
        run: npx wait-on http://localhost:4321 --timeout 120000
      - name: Run visual regression tests
        run: npm run test:visual
      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-test-results
          path: test-results/
      - name: Install axe-core CLI
        run: npm install -g @axe-core/cli pa11y
      - name: Run accessibility audit
        run: ./scripts/run-accessibility-audit.sh
        continue-on-error: true
      - name: Upload accessibility reports
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-reports
          path: |
            accessibility-*.json
            pa11y-*.json
      - name: Run color contrast tests
        run: npx playwright test tests/accessibility/color-contrast.spec.js --reporter=html
      - name: Upload contrast test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: contrast-test-report
          path: playwright-report/
      - name: Setup Python for readability tools
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install readability tools
        run: pip install textstat beautifulsoup4 requests
      - name: Analyze content readability
        run: python3 scripts/analyze-readability.py
      - name: Upload readability report
        uses: actions/upload-artifact@v4
        with:
          name: readability-report
          path: readability-report.json
      - name: Generate Quality Summary
        run: ./scripts/generate-quality-summary.sh
      - name: Upload quality summary
        uses: actions/upload-artifact@v4
        with:
          name: quality-summary-report
          path: QUALITY_REPORT.md

  deploy:
    needs: [ci, design-system, image-optimization, visual-quality]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout your repository
        uses: actions/checkout@v4
      - name: Install, build, and upload your site
        uses: withastro/action@v2
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
